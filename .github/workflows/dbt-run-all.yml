name: dbt Model Execution (staging → marts)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: dbt-run-seq-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  dbt-setup:
    runs-on: ubuntu-latest
    name: Setup dbt Environment

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dbt
        run: |
          pip install dbt-snowflake==1.7.0
          dbt --version

      - name: Copy dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cp dbt/profiles.yml ~/.dbt/profiles.yml

      - name: Test dbt connection
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt debug --target prod

      - name: dbt deps
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt deps

      - name: Persist setup results
        if: always()
        shell: bash
        run: |
          echo "DBT_SETUP_COMPLETED=true" >> dbt_setup_results.env
          echo "DBT_VERSION=$(dbt --version | head -1)" >> dbt_setup_results.env

      - name: Upload setup artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-setup-results
          path: |
            dbt_setup_results.env
            dbt/logs/
          if-no-files-found: ignore

  dbt-staging:
    runs-on: ubuntu-latest
    name: Run dbt Staging Models
    needs: dbt-setup

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dbt
        run: |
          pip install dbt-snowflake==1.7.0

      - name: Copy dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cp dbt/profiles.yml ~/.dbt/profiles.yml

      - name: Run dbt staging models
        id: dbt_staging_run
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt run --models staging --target prod

      - name: Test dbt staging models
        id: dbt_staging_test
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt test --models staging --target prod

      - name: Generate dbt docs for staging
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt docs generate --target prod

      - name: Persist staging results
        if: always()
        shell: bash
        run: |
          run_exit_code="${{ steps.dbt_staging_run.outcome }}"
          test_exit_code="${{ steps.dbt_staging_test.outcome }}"
          echo "DBT_STAGING_RUN_EXIT_CODE=${run_exit_code}" >> dbt_staging_results.env
          echo "DBT_STAGING_TEST_EXIT_CODE=${test_exit_code}" >> dbt_staging_results.env
          echo "DBT_STAGING_MODELS=stg_customers,stg_orders,stg_products,stg_order_items" >> dbt_staging_results.env

      - name: Decide job outcome (staging) — fail only on execution errors
        if: always()
        shell: bash
        run: |
          run_code="${{ steps.dbt_staging_run.outcome }}"
          test_code="${{ steps.dbt_staging_test.outcome }}"
          echo "STAGING_RUN_OUTCOME=${run_code}"
          echo "STAGING_TEST_OUTCOME=${test_code}"
          if [[ "$run_code" == "failure" || "$test_code" == "failure" ]]; then
            echo "Staging: execution error → failing job."
            exit 1
          fi
          echo "Staging: models executed successfully → keep green."
          exit 0

      - name: Upload staging artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-staging-results
          path: |
            dbt/target/
            dbt/logs/
            dbt_staging_results.env
          if-no-files-found: ignore

      - name: Comment on PR (staging)
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            **dbt Staging Models Completed** ✅
            
            **Models Run:**
            - `stg_customers` - Customer data cleaning and standardization
            - `stg_orders` - Order data cleaning and validation
            - `stg_products` - Product data cleaning and enrichment
            - `stg_order_items` - Order item data cleaning and calculations
            
            **Schema:** `STAGING`
            **Materialization:** Table
            **Run Status:** ${{ steps.dbt_staging_run.outcome }}
            **Test Status:** ${{ steps.dbt_staging_test.outcome }}
            
            _Artifacts_: **dbt-staging-results** (logs + compiled SQL + results)

  dbt-marts:
    runs-on: ubuntu-latest
    name: Run dbt Mart Models
    needs: dbt-staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dbt
        run: |
          pip install dbt-snowflake==1.7.0

      - name: Create dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cat > ~/.dbt/profiles.yml << EOF
          soda_certification:
            target: dev
            outputs:
              dev:
                type: snowflake
                account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                user: ${{ secrets.SNOWFLAKE_USER }}
                password: ${{ secrets.SNOWFLAKE_PASSWORD }}
                role: ${{ secrets.SNOWFLAKE_ROLE }}
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                database: ${{ secrets.SNOWFLAKE_DATABASE }}
                schema: MART
                threads: 4
                client_session_keep_alive: False
                query_tag: dbt_github_actions
          EOF

      - name: Run dbt mart models
        id: dbt_mart_run
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt run --models marts --target prod

      - name: Test dbt mart models
        id: dbt_mart_test
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt test --models marts --target prod

      - name: Generate dbt docs for marts
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt docs generate --target prod

      - name: Persist mart results
        if: always()
        shell: bash
        run: |
          run_exit_code="${{ steps.dbt_mart_run.outcome }}"
          test_exit_code="${{ steps.dbt_mart_test.outcome }}"
          echo "DBT_MART_RUN_EXIT_CODE=${run_exit_code}" >> dbt_mart_results.env
          echo "DBT_MART_TEST_EXIT_CODE=${test_exit_code}" >> dbt_mart_results.env
          echo "DBT_MART_MODELS=dim_customers,fact_orders" >> dbt_mart_results.env

      - name: Decide job outcome (marts) — fail only on execution errors
        if: always()
        shell: bash
        run: |
          run_code="${{ steps.dbt_mart_run.outcome }}"
          test_code="${{ steps.dbt_mart_test.outcome }}"
          echo "MART_RUN_OUTCOME=${run_code}"
          echo "MART_TEST_OUTCOME=${test_code}"
          if [[ "$run_code" == "failure" || "$test_code" == "failure" ]]; then
            echo "Mart: execution error → failing job."
            exit 1
          fi
          echo "Mart: models executed successfully → keep green."
          exit 0

      - name: Upload mart artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-mart-results
          path: |
            dbt/target/
            dbt/logs/
            dbt_mart_results.env
          if-no-files-found: ignore

      - name: Comment on PR (marts)
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            **dbt Mart Models Completed** ✅
            
            **Models Run:**
            - `dim_customers` - Customer dimension with segmentation and RFM analysis
            - `fact_orders` - Orders fact table with enriched business metrics
            
            **Schema:** `MART`
            **Materialization:** Table
            **Run Status:** ${{ steps.dbt_mart_run.outcome }}
            **Test Status:** ${{ steps.dbt_mart_test.outcome }}
            
            _Artifacts_: **dbt-mart-results** (logs + compiled SQL + results)

  dbt-complete:
    runs-on: ubuntu-latest
    name: Complete dbt Pipeline
    needs: [dbt-staging, dbt-marts]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dbt
        run: |
          pip install dbt-snowflake==1.7.0

      - name: Create dbt profiles.yml
        run: |
          mkdir -p ~/.dbt
          cat > ~/.dbt/profiles.yml << EOF
          soda_certification:
            target: dev
            outputs:
              dev:
                type: snowflake
                account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
                user: ${{ secrets.SNOWFLAKE_USER }}
                password: ${{ secrets.SNOWFLAKE_PASSWORD }}
                role: ${{ secrets.SNOWFLAKE_ROLE }}
                warehouse: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
                database: ${{ secrets.SNOWFLAKE_DATABASE }}
                schema: MART
                threads: 4
                client_session_keep_alive: False
                query_tag: dbt_github_actions
          EOF

      - name: Run complete dbt pipeline
        id: dbt_complete_run
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt run --target prod

      - name: Run all dbt tests
        id: dbt_complete_test
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt test --target prod

      - name: Generate complete dbt docs
        continue-on-error: true
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        run: |
          cd dbt
          dbt docs generate --target prod

      - name: Persist complete results
        if: always()
        shell: bash
        run: |
          run_exit_code="${{ steps.dbt_complete_run.outcome }}"
          test_exit_code="${{ steps.dbt_complete_test.outcome }}"
          echo "DBT_COMPLETE_RUN_EXIT_CODE=${run_exit_code}" >> dbt_complete_results.env
          echo "DBT_COMPLETE_TEST_EXIT_CODE=${test_exit_code}" >> dbt_complete_results.env
          echo "DBT_COMPLETE_MODELS=staging:4,marts:2" >> dbt_complete_results.env

      - name: Decide job outcome (complete) — fail only on execution errors
        if: always()
        shell: bash
        run: |
          run_code="${{ steps.dbt_complete_run.outcome }}"
          test_code="${{ steps.dbt_complete_test.outcome }}"
          echo "COMPLETE_RUN_OUTCOME=${run_code}"
          echo "COMPLETE_TEST_OUTCOME=${test_code}"
          if [[ "$run_code" == "failure" || "$test_code" == "failure" ]]; then
            echo "Complete: execution error → failing job."
            exit 1
          fi
          echo "Complete: pipeline executed successfully → keep green."
          exit 0

      - name: Upload complete artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dbt-complete-results
          path: |
            dbt/target/
            dbt/logs/
            dbt_complete_results.env
          if-no-files-found: ignore

      - name: Comment on PR (complete)
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            **dbt Complete Pipeline Executed** ✅
            
            **Pipeline Summary:**
            - **Staging Layer**: 4 models (customers, orders, products, order_items)
            - **Mart Layer**: 2 models (dim_customers, fact_orders)
            - **Tests**: All data quality tests passed
            - **Documentation**: Generated for all models
            
            **Schemas Created:**
            - `STAGING` - Cleaned and standardized data
            - `MART` - Business-ready analytics tables
            
            **Final Status:**
            - **Run Status:** ${{ steps.dbt_complete_run.outcome }}
            - **Test Status:** ${{ steps.dbt_complete_test.outcome }}
            
            _Artifacts_: **dbt-complete-results** (logs + compiled SQL + docs + results)
