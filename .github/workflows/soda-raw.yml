name: Soda Scan (RAW)

on:
  workflow_dispatch: {}
  push:
    branches: ['**']     # run on any branch push
  pull_request:          # run on any PR

concurrency:
  group: soda-raw-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write   # needed for the PR comment step (internal PRs)

jobs:
  scan:
    name: Run Soda Scan on RAW
    runs-on: ubuntu-latest

    outputs:
      exit_code: ${{ steps.capture.outputs.exit_code }}
      cloud_link: ${{ steps.capture.outputs.cloud_link }}
      results_json: ${{ steps.capture.outputs.results_json }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Perform Soda Scan (RAW)
        id: soda
        uses: sodadata/soda-github-action@main
        continue-on-error: true
        env:
          SODA_CLOUD_HOST:           ${{ secrets.SODA_CLOUD_HOST }}
          SODA_CLOUD_API_KEY_ID:     ${{ secrets.SODA_CLOUD_API_KEY_ID }}
          SODA_CLOUD_API_KEY_SECRET: ${{ secrets.SODA_CLOUD_API_KEY_SECRET }}
          SNOWFLAKE_ACCOUNT:         ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER:            ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD:        ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE:            ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE:       ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE:        ${{ secrets.SNOWFLAKE_DATABASE }}
        with:
          soda_library_version: v1.0.4
          data_source: soda_certification_raw
          configuration: ./soda/configuration/configuration_raw.yml
          checks: ./soda/checks/raw

      - name: Capture Soda outputs
        id: capture
        run: |
          # Save JSON results to a file (robust against newlines)
          printf '%s' "${{ steps.soda.outputs['scan-results'] }}" > soda_scan_results_raw.json

          # Expose outputs to other jobs/steps
          echo "cloud_link=${{ steps.soda.outputs['scan-cloud-link'] }}" >> "$GITHUB_OUTPUT"
          echo "exit_code=${{ steps.soda.outputs['scan-exit-code'] }}" >> "$GITHUB_OUTPUT"

          # Compress JSON to a single line for safe embedding in PR comments
          if command -v jq >/dev/null 2>&1; then
            jq -c . soda_scan_results_raw.json > results_min.json
          else
            tr -d '\n' < soda_scan_results_raw.json > results_min.json
          fi
          echo "results_json=$(cat results_min.json)" >> "$GITHUB_OUTPUT"

      - name: Job summary
        run: |
          echo "## Soda RAW scan" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Cloud report: ${{ steps.capture.outputs.cloud_link }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          cat soda_scan_results_raw.json >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soda-raw-artifacts
          path: |
            .soda/**/*
            soda/**/*
            soda_scan_results_raw.json
          if-no-files-found: ignore

  # PR comment only for PRs from the same repo (forks often lack token perms)
  pr_comment:
    name: Comment results on PR
    needs: scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Comment on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          issue_number: ${{ github.event.pull_request.number }}
          mode: upsert
          create_if_not_exists: true
          message: |
            ${{ needs.scan.outputs.exit_code != '0' && 'ðŸ”´' || 'ðŸŸ¢' }} **Soda RAW scan**

            ```json
            ${{ needs.scan.outputs.results_json }}
            ```

            [View the full scan results](${{ needs.scan.outputs.cloud_link }})

  gate:
    name: Enforce CI status
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Fail on Soda failures
        run: |
          code='${{ needs.scan.outputs.exit_code }}'
          echo "Soda exit code: $code"
          if [ "$code" != "0" ]; then
            exit "$code"
          fi