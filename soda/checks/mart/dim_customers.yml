# MART Layer - Customer Dimension Table Quality Checks
# Database: SODA_CERTIFICATION, Schema: MART
# Table: dim_customers (10,000+ records)
# Purpose: Business-ready data with strictest quality requirements

# Dataset discovery configuration for Soda Cloud
discover datasets:
  datasets:
    - include DIM_CUSTOMERS

# Soda Cloud Profiling Configuration for Partner Certification
profile columns:
  columns:
    - DIM_CUSTOMERS.%
    - exclude DIM_CUSTOMERS.CREATED_AT
    - exclude DIM_CUSTOMERS.UPDATED_AT
    - exclude DIM_CUSTOMERS.INGESTION_TIMESTAMP
    - exclude DIM_CUSTOMERS.HAS_MISSING_EMAIL
    - exclude DIM_CUSTOMERS.HAS_MISSING_PHONE
    - exclude DIM_CUSTOMERS.HAS_MISSING_NAME
    - exclude DIM_CUSTOMERS.FIRST_ORDER_DATE
    - exclude DIM_CUSTOMERS.LAST_ORDER_DATE
    - exclude DIM_CUSTOMERS.DAYS_SINCE_LAST_ORDER
    - exclude DIM_CUSTOMERS.ORDERS_PER_MONTH

# Sample datasets configuration for Soda Cloud
sample datasets:
  datasets:
    - include DIM_CUSTOMERS

checks for DIM_CUSTOMERS:
  # Row count checks with sampling
  - row_count between 8000 and 12000:
      name: "Mart customer count within expected range"
      samples limit: 2000
  
  # Schema validation
  - schema:
      name: "Mart customer dimension schema validation"
      fail:
        when required column missing: [CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL, DATA_QUALITY_SCORE]
        when forbidden column present: [DUPLICATE_ID, TEST_COLUMN]
  
  # Completeness checks (no missing values allowed) with sampling
  - missing_count(CUSTOMER_ID) = 0:
      name: "No missing customer IDs in mart"
      samples limit: 2000
  
  - missing_count(FIRST_NAME) = 0:
      name: "No missing first names in mart"
      samples limit: 2000
  
  - missing_count(LAST_NAME) = 0:
      name: "No missing last names in mart"
      samples limit: 2000
  
  - missing_count(EMAIL) < 1000:
      name: "Most emails present in mart"
      samples limit: 2000
  
  # Uniqueness checks (strict) with sampling
  - duplicate_count(CUSTOMER_ID) = 0:
      name: "Customer IDs are unique in mart"
      samples limit: 2000
  
  - duplicate_count(EMAIL) = 0:
      name: "Emails are unique in mart"
      samples limit: 2000
  
  # Data quality score (high) with sampling
  - min(DATA_QUALITY_SCORE) > 80:
      name: "All customers have high data quality score"
      samples limit: 2000
  
  - avg(DATA_QUALITY_SCORE) > 90:
      name: "Average data quality score is high"
      samples limit: 2000
  
  # Validity checks (strict) with sampling
  - invalid_count(EMAIL) = 0:
      name: "All emails are valid in mart"
      valid regex: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
      samples limit: 2000
  
  - invalid_count(PHONE) = 0:
      name: "All phone numbers are valid in mart"
      valid regex: '^[0-9\-\+\(\)\s]+$'
      samples limit: 2000
  
  # Freshness checks
  - freshness(CREATED_AT) < 1d:
      name: "Mart customer data is fresh"
  
  # Failed row samples for detailed analysis
  - failed rows:
      samples limit: 50
      fail query: |
        SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, DATA_QUALITY_SCORE
        FROM DIM_CUSTOMERS
        WHERE CUSTOMER_ID IS NULL 
           OR FIRST_NAME IS NULL 
           OR LAST_NAME IS NULL
           OR EMAIL IS NULL
           OR NOT REGEXP_LIKE(EMAIL, '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')
           OR NOT REGEXP_LIKE(PHONE, '^[0-9\\-\\+\\(\\)\\s]+$')
           OR DATA_QUALITY_SCORE < 80
      name: "Sample failed mart customer dimension records for analysis"
      fail: when > 200
