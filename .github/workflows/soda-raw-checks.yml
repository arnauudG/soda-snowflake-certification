# .github/workflows/soda-scan-raw.yml
name: Soda Data Quality Scan (raw)

on:
  push:
    branches: [ main ]        # adjust as needed
  pull_request:
    branches: [ main ]

jobs:
  soda_scan_raw:
    runs-on: ubuntu-latest
    name: Run Soda Scan (raw)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Soda Library Action (raw)
        id: soda_raw
        uses: sodadata/soda-github-action@v1.0.2
        # Allow post-processing even if the container exits non-zero
        continue-on-error: true
        env:
          # --- Soda Cloud ---
          SODA_CLOUD_API_KEY_ID: ${{ secrets.SODA_CLOUD_API_KEY_ID }}
          SODA_CLOUD_API_KEY_SECRET: ${{ secrets.SODA_CLOUD_API_KEY_SECRET }}
          SODA_CLOUD_HOST: ${{ secrets.SODA_CLOUD_HOST }}   # e.g. https://cloud.soda.io
          # --- Snowflake (must match your config placeholders) ---
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        with:
          soda_library_version: v1.0.4
          data_source: soda_certification_raw
          configuration: soda/configuration/configuration_raw.yml
          checks: soda/checks/raw/*.yml

      # Persist the envs the action exposes so artifacts always exist
      - name: Persist Soda results
        if: always()
        shell: bash
        run: |
          printf '%s\n' "${SCAN_RESULTS:-[]}" > soda_scan_results_raw.json
          printf '%s\n' "${SCAN_CLOUD_LINK:-}" > soda_scan_results_raw.link.txt

      # Gate: fail only on execution/config errors, not on data failures
      - name: Decide job outcome (fail only on execution errors)
        if: always()
        shell: bash
        run: |
          code="${SCAN_EXIT_CODE:-}"
          echo "SCAN_EXIT_CODE=${code}"
          echo "SCAN_CLOUD_LINK=${SCAN_CLOUD_LINK:-}"
          echo "SCAN_RESULTS=${SCAN_RESULTS:-}"

          # If Soda step didn't expose an exit code → treat as execution error
          if [[ -z "$code" ]]; then
            echo "Soda did not expose SCAN_EXIT_CODE. Treating as an execution/config error."
            exit 1
          fi

          # By convention from the Soda action:
          # 0 = success, 2 = checks failed, 1 = execution error
          if [[ "$code" -eq 1 ]]; then
            echo "Soda execution error (config/connectivity/runtime). Failing the job."
            exit 1
          fi

          # If here, checks executed (0 or 2) → keep job green
          echo "Checks executed (exit ${code}). Keeping the workflow green."
          exit 0

      - name: Upload scan results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soda-scan-results-raw
          path: |
            soda_scan_results_raw.json
            soda_scan_results_raw.link.txt
          if-no-files-found: ignore

      # Optional extras (guarded to PR only and won't fail the job)
      - name: Build tiny table for PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: buildingcash/json-to-markdown-table-action@ce128b72e0c93612c8f02b85e0672bcb16fd9bf9
        continue-on-error: true
        with:
          json: ${{ env.SCAN_RESULTS }}
        env:
          SCAN_RESULTS: ${{ env.SCAN_RESULTS }}

      - name: Comment on PR with link + summary
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            ✅ **Soda scan (raw) completed**
            **Soda Cloud:** ${SCAN_CLOUD_LINK}

            **Summary (Pass/Warn/Fail counts):**
            ```
            ${SCAN_RESULTS}
            ```

            _Artifacts_: **soda-scan-results-raw** (JSON + link)
        env:
          SCAN_CLOUD_LINK: ${{ env.SCAN_CLOUD_LINK }}
          SCAN_RESULTS: ${{ env.SCAN_RESULTS }}