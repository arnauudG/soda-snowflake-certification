name: Soda Data Quality Scans (raw → staging → mart → quality)

on:
  push:
    branches: [ main ]        # adjust as needed
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: soda-scan-seq-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  raw:
    runs-on: ubuntu-latest
    name: Run Soda Scan (raw)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug environment variables
        run: |
          echo "Checking environment variables..."
          echo "SNOWFLAKE_ACCOUNT: ${SNOWFLAKE_ACCOUNT:+SET}"
          echo "SNOWFLAKE_USER: ${SNOWFLAKE_USER:+SET}"
          echo "SNOWFLAKE_PASSWORD: ${SNOWFLAKE_PASSWORD:+SET}"
          echo "SNOWFLAKE_ROLE: ${SNOWFLAKE_ROLE:+SET}"
          echo "SNOWFLAKE_WAREHOUSE: ${SNOWFLAKE_WAREHOUSE:+SET}"
          echo "SNOWFLAKE_DATABASE: ${SNOWFLAKE_DATABASE:+SET}"
          echo "SODA_CLOUD_API_KEY_ID: ${SODA_CLOUD_API_KEY_ID:+SET}"
          echo "SODA_CLOUD_API_KEY_SECRET: ${SODA_CLOUD_API_KEY_SECRET:+SET}"
          echo "SODA_CLOUD_HOST: ${SODA_CLOUD_HOST:+SET}"
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SODA_CLOUD_API_KEY_ID: ${{ secrets.SODA_CLOUD_API_KEY_ID }}
          SODA_CLOUD_API_KEY_SECRET: ${{ secrets.SODA_CLOUD_API_KEY_SECRET }}
          SODA_CLOUD_HOST: ${{ secrets.SODA_CLOUD_HOST }}

      - name: Soda Library Action (raw)
        id: soda_raw
        uses: sodadata/soda-github-action@v1.0.2
        continue-on-error: true
        env:
          # --- Soda Cloud ---
          SODA_CLOUD_API_KEY_ID: ${{ secrets.SODA_CLOUD_API_KEY_ID }}
          SODA_CLOUD_API_KEY_SECRET: ${{ secrets.SODA_CLOUD_API_KEY_SECRET }}
          SODA_CLOUD_HOST: ${{ secrets.SODA_CLOUD_HOST }}   # e.g. https://cloud.soda.io
          # --- Snowflake (match your config placeholders) ---
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        with:
          soda_library_version: v1.0.4
          data_source: soda_certification_raw
          configuration: soda/configuration/configuration_raw.yml
          checks: soda/checks/raw/*.yml

      - name: Persist Soda results (raw)
        if: always()
        shell: bash
        run: |
          printf '%s\n' "${SCAN_RESULTS:-[]}" > soda_scan_results_raw.json
          printf '%s\n' "${SCAN_CLOUD_LINK:-}" > soda_scan_results_raw.link.txt
      - name: Decide job outcome (raw) — fail only on execution errors
        if: always()
        shell: bash
        run: |
          code="${SCAN_EXIT_CODE:-}"
          echo "RAW_SCN_EXIT_CODE=${code}"
          echo "Step outcome: ${{ steps.soda_raw.outcome }}"
          if [[ -z "$code" ]]; then
            echo "Raw: SCAN_EXIT_CODE not set, checking step outcome..."
            if [[ "${{ steps.soda_raw.outcome }}" == "failure" ]]; then
              echo "Raw: step failed → failing job."
              exit 1
            else
              echo "Raw: step succeeded → keep green."
              exit 0
            fi
          elif [[ "$code" -eq 1 ]]; then
            echo "Raw: execution/config error → failing job."
            exit 1
          else
            echo "Raw: checks executed (exit ${code}) → keep green."
            exit 0
          fi
      - name: Upload scan results artifact (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soda-scan-results-raw
          path: |
            soda_scan_results_raw.json
            soda_scan_results_raw.link.txt
          if-no-files-found: ignore

      - name: Comment on PR (raw)
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            **Soda scan (raw) completed**
            **Soda Cloud:** ${SCAN_CLOUD_LINK}
            **Summary (Pass/Warn/Fail counts):**
            ```
            ${SCAN_RESULTS}
            ```
            _Artifacts_: **soda-scan-results-raw** (JSON + link)
  staging:
    runs-on: ubuntu-latest
    name: Run Soda Scan (staging)
    needs: raw   # enforce ordering

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Soda Library Action (staging)
        id: soda_staging
        uses: sodadata/soda-github-action@v1.0.2
        continue-on-error: true
        env:
          SODA_CLOUD_API_KEY_ID: ${{ secrets.SODA_CLOUD_API_KEY_ID }}
          SODA_CLOUD_API_KEY_SECRET: ${{ secrets.SODA_CLOUD_API_KEY_SECRET }}
          SODA_CLOUD_HOST: ${{ secrets.SODA_CLOUD_HOST }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        with:
          soda_library_version: v1.0.4
          data_source: soda_certification_staging
          configuration: soda/configuration/configuration_staging.yml
          checks: soda/checks/staging/*.yml

      - name: Persist Soda results (staging)
        if: always()
        shell: bash
        run: |
          printf '%s\n' "${SCAN_RESULTS:-[]}" > soda_scan_results_staging.json
          printf '%s\n' "${SCAN_CLOUD_LINK:-}" > soda_scan_results_staging.link.txt
      - name: Decide job outcome (staging) — fail only on execution errors
        if: always()
        shell: bash
        run: |
          code="${SCAN_EXIT_CODE:-}"
          echo "STAGING_SCN_EXIT_CODE=${code}"
          echo "Step outcome: ${{ steps.soda_staging.outcome }}"
          if [[ -z "$code" ]]; then
            echo "Staging: SCAN_EXIT_CODE not set, checking step outcome..."
            if [[ "${{ steps.soda_staging.outcome }}" == "failure" ]]; then
              echo "Staging: step failed → failing job."
              exit 1
            else
              echo "Staging: step succeeded → keep green."
              exit 0
            fi
          elif [[ "$code" -eq 1 ]]; then
            echo "Staging: execution/config error → failing job."
            exit 1
          else
            echo "Staging: checks executed (exit ${code}) → keep green."
            exit 0
          fi
      - name: Upload scan results artifact (staging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soda-scan-results-staging
          path: |
            soda_scan_results_staging.json
            soda_scan_results_staging.link.txt
          if-no-files-found: ignore

      - name: Comment on PR (staging)
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            **Soda scan (staging) completed**
            **Soda Cloud:** ${SCAN_CLOUD_LINK}
            **Summary (Pass/Warn/Fail counts):**
            ```
            ${SCAN_RESULTS}
            ```
            _Artifacts_: **soda-scan-results-staging** (JSON + link)
  mart:
    runs-on: ubuntu-latest
    name: Run Soda Scan (mart)
    needs: staging   # enforce ordering

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Soda Library Action (mart)
        id: soda_mart
        uses: sodadata/soda-github-action@v1.0.2
        continue-on-error: true
        env:
          SODA_CLOUD_API_KEY_ID: ${{ secrets.SODA_CLOUD_API_KEY_ID }}
          SODA_CLOUD_API_KEY_SECRET: ${{ secrets.SODA_CLOUD_API_KEY_SECRET }}
          SODA_CLOUD_HOST: ${{ secrets.SODA_CLOUD_HOST }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        with:
          soda_library_version: v1.0.4
          data_source: soda_certification_mart
          configuration: soda/configuration/configuration_mart.yml
          checks: soda/checks/marts/*.yml

      - name: Persist Soda results (mart)
        if: always()
        shell: bash
        run: |
          printf '%s\n' "${SCAN_RESULTS:-[]}" > soda_scan_results_mart.json
          printf '%s\n' "${SCAN_CLOUD_LINK:-}" > soda_scan_results_mart.link.txt
      - name: Decide job outcome (mart) — fail only on execution errors
        if: always()
        shell: bash
        run: |
          code="${SCAN_EXIT_CODE:-}"
          echo "MART_SCN_EXIT_CODE=${code}"
          echo "Step outcome: ${{ steps.soda_mart.outcome }}"
          if [[ -z "$code" ]]; then
            echo "Mart: SCAN_EXIT_CODE not set, checking step outcome..."
            if [[ "${{ steps.soda_mart.outcome }}" == "failure" ]]; then
              echo "Mart: step failed → failing job."
              exit 1
            else
              echo "Mart: step succeeded → keep green."
              exit 0
            fi
          elif [[ "$code" -eq 1 ]]; then
            echo "Mart: execution/config error → failing job."
            exit 1
          else
            echo "Mart: checks executed (exit ${code}) → keep green."
            exit 0
          fi
      - name: Upload scan results artifact (mart)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soda-scan-results-mart
          path: |
            soda_scan_results_mart.json
            soda_scan_results_mart.link.txt
          if-no-files-found: ignore

      - name: Comment on PR (mart)
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            **Soda scan (mart) completed**
            **Soda Cloud:** ${SCAN_CLOUD_LINK}
            **Summary (Pass/Warn/Fail counts):**
            ```
            ${SCAN_RESULTS}
            ```
            _Artifacts_: **soda-scan-results-mart** (JSON + link)
  quality:
    runs-on: ubuntu-latest
    name: Run Soda Scan (quality/results)
    needs: mart   # enforce ordering (runs last)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Soda Library Action (quality)
        id: soda_quality
        uses: sodadata/soda-github-action@v1.0.2
        continue-on-error: true
        env:
          SODA_CLOUD_API_KEY_ID: ${{ secrets.SODA_CLOUD_API_KEY_ID }}
          SODA_CLOUD_API_KEY_SECRET: ${{ secrets.SODA_CLOUD_API_KEY_SECRET }}
          SODA_CLOUD_HOST: ${{ secrets.SODA_CLOUD_HOST }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        with:
          soda_library_version: v1.0.4
          data_source: soda_certification_quality
          configuration: soda/configuration/configuration_quality.yml
          checks: soda/checks/quality/*.yml

      - name: Persist Soda results (quality)
        if: always()
        shell: bash
        run: |
          printf '%s\n' "${SCAN_RESULTS:-[]}" > soda_scan_results_quality.json
          printf '%s\n' "${SCAN_CLOUD_LINK:-}" > soda_scan_results_quality.link.txt
      - name: Decide job outcome (quality) — fail only on execution errors
        if: always()
        shell: bash
        run: |
          code="${SCAN_EXIT_CODE:-}"
          echo "QUALITY_SCN_EXIT_CODE=${code}"
          echo "Step outcome: ${{ steps.soda_quality.outcome }}"
          if [[ -z "$code" ]]; then
            echo "Quality: SCAN_EXIT_CODE not set, checking step outcome..."
            if [[ "${{ steps.soda_quality.outcome }}" == "failure" ]]; then
              echo "Quality: step failed → failing job."
              exit 1
            else
              echo "Quality: step succeeded → keep green."
              exit 0
            fi
          elif [[ "$code" -eq 1 ]]; then
            echo "Quality: execution/config error → failing job."
            exit 1
          else
            echo "Quality: checks executed (exit ${code}) → keep green."
            exit 0
          fi
      - name: Upload scan results artifact (quality)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soda-scan-results-quality
          path: |
            soda_scan_results_quality.json
            soda_scan_results_quality.link.txt
          if-no-files-found: ignore

      - name: Comment on PR (quality)
        if: ${{ github.event_name == 'pull_request' }}
        uses: thollander/actions-comment-pull-request@8c77f42bbcc27c832a3a5962c8f9a60e34b594f3
        continue-on-error: true
        with:
          message: |
            **Soda scan (quality/results) completed**
            **Soda Cloud:** ${SCAN_CLOUD_LINK}
            **Summary (Pass/Warn/Fail counts):**
            ```
            ${SCAN_RESULTS}
            ```
            _Artifacts_: **soda-scan-results-quality** (JSON + link)