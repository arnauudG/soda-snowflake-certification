# version: '3.8'  # Removed obsolete version attribute

services:
  # Airflow services
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: soda-airflow-webserver
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      # Performance settings
      - AIRFLOW__CORE__PARALLELISM=4
      - AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG=4
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=300
      # Snowflake connection
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE:-ACCOUNTADMIN}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE:-SODA_WH}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE:-SODA_CERTIFICATION}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA:-RAW}
      # Soda Cloud connection
      - SODA_CLOUD_API_KEY_ID=${SODA_CLOUD_API_KEY_ID}
      - SODA_CLOUD_API_KEY_SECRET=${SODA_CLOUD_API_KEY_SECRET}
      - SODA_CLOUD_HOST=${SODA_CLOUD_HOST:-cloud.soda.io}
    volumes:
      - ../dags:/opt/airflow/dags
      - ../plugins:/opt/airflow/plugins
      - ../../scripts:/opt/airflow/scripts
      - ../../dbt:/opt/airflow/dbt
      - ../../soda:/opt/airflow/soda
      - ../../.env:/opt/airflow/.env
      - ./airflow-logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: soda-airflow-scheduler
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here
      # Performance settings
      - AIRFLOW__CORE__PARALLELISM=4
      - AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG=4
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=300
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      # Snowflake connection
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE:-ACCOUNTADMIN}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE:-SODA_WH}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE:-SODA_CERTIFICATION}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA:-RAW}
      # Soda Cloud connection
      - SODA_CLOUD_API_KEY_ID=${SODA_CLOUD_API_KEY_ID}
      - SODA_CLOUD_API_KEY_SECRET=${SODA_CLOUD_API_KEY_SECRET}
      - SODA_CLOUD_HOST=${SODA_CLOUD_HOST:-cloud.soda.io}
    volumes:
      - ../dags:/opt/airflow/dags
      - ../plugins:/opt/airflow/plugins
      - ../../scripts:/opt/airflow/scripts
      - ../../dbt:/opt/airflow/dbt
      - ../../soda:/opt/airflow/soda
      - ../../.env:/opt/airflow/.env
      - ./airflow-logs:/opt/airflow/logs
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: soda-airflow-init
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=your-fernet-key-here
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
      - _AIRFLOW_WWW_USER_EMAIL=admin@example.com
      - _AIRFLOW_WWW_USER_FIRSTNAME=Admin
      - _AIRFLOW_WWW_USER_LASTNAME=User
      - _AIRFLOW_WWW_USER_ROLE=Admin
      # Snowflake connection
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ROLE=${SNOWFLAKE_ROLE:-ACCOUNTADMIN}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE:-SODA_WH}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE:-SODA_CERTIFICATION}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA:-RAW}
      # Soda Cloud connection
      - SODA_CLOUD_API_KEY_ID=${SODA_CLOUD_API_KEY_ID}
      - SODA_CLOUD_API_KEY_SECRET=${SODA_CLOUD_API_KEY_SECRET}
      - SODA_CLOUD_HOST=${SODA_CLOUD_HOST:-cloud.soda.io}
    volumes:
      - ../dags:/opt/airflow/dags
      - ../plugins:/opt/airflow/plugins
      - ../../scripts:/opt/airflow/scripts
      - ../../dbt:/opt/airflow/dbt
      - ../../soda:/opt/airflow/soda
      - ../../.env:/opt/airflow/.env
      - ./airflow-logs:/opt/airflow/logs
    command: version
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:13
    container_name: soda-postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

volumes:
  postgres-db-volume:
